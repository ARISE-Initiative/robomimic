import h5py
import json
import argparse
import os
from shutil import copyfile
import robosuite
import xml.etree.ElementTree as ET

def convert_xml(xml_str):
    """
    Postprocess xml string generated by robosuite to be compatible with robosuite v1.3
    This script should not the xml string if it was already generated using robosuite v1.3
    Args:
        xml_str (str): xml string to process (from robosuite v1.2)
    """

    def get_eef_panda_element(prefix):
        """
        Helper function for new element added in robosuite v1.3
        """

        eef_panda = """
        <body name="eef" pos="0 0 0.097" quat="1 0 0 0">
            <site name="grip_site" pos="0 0 0" size="0.01 0.01 0.01" rgba="1 0 0 0.5" type="sphere" group="1"/>
            <site name="ee_x" pos="0.1 0 0" size="0.005 .1"  quat="0.707105  0 0.707108 0 " rgba="1 0 0 0" type="cylinder" group="1"/>
            <site name="ee_y" pos="0 0.1 0" size="0.005 .1" quat="0.707105 0.707108 0 0" rgba="0 1 0 0" type="cylinder" group="1"/>
            <site name="ee_z" pos="0 0 0.1" size="0.005 .1" quat="1 0 0 0" rgba="0 0 1 0" type="cylinder" group="1"/>
            <!-- This site was added for visualization. -->
            <site name="grip_site_cylinder" pos="0 0 0" size="0.005 10" rgba="0 1 0 0.3" type="cylinder" group="1"/>
        </body>
        """

        tree = ET.ElementTree(ET.fromstring(eef_panda))
        root = tree.getroot()
        for elem in root.iter():
            elem.attrib["name"] = "{}_{}".format(prefix, elem.get("name"))

        return tree

    root = ET.fromstring(xml_str)
    worldbody = root.find('worldbody')
    bodies_to_process = []
    # remove elements that are specific to v1.2
    for body in worldbody.iter('body'):
        for site in body.findall('site'):
            site_name = site.get('name')

            # remove grip_site and grip_site_cylinder
            if 'grip_site' in site_name:
                # print("removing {site} from {body}".format(
                #     site=site_name,
                #     body=body.get('name'),
                # ))
                body.remove(site)
                if body not in bodies_to_process:
                    bodies_to_process.append(body)

            # remove site called robot{}_ee{}
            if site_name.startswith('robot') and 'ee' in site_name:
                # print("removing {site} from {body}".format(
                #     site=site_name,
                #     body=body.get('name'),
                # ))
                body.remove(site)

    # add elements introduced in v1.3
    for body in bodies_to_process:
        prefix = body.get("name").split('_')[0]
        eef_tree = get_eef_panda_element(prefix)
        body.append(eef_tree.getroot())

    xml_str = ET.tostring(root, encoding="utf8").decode("utf8")
    return xml_str

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--dataset",
        type=str,
        help="path to input hdf5 dataset",
    )
    parser.add_argument(
        "--output_dataset",
        type=str,
        help="path to output hdf5 dataset",
    )
    args = parser.parse_args()
    
    args.dataset = os.path.expanduser(args.dataset)
    args.output_dataset = os.path.expanduser(args.output_dataset)
    
    assert args.output_dataset != args.dataset
    assert robosuite.__version__ == '1.3.1'
    
    copyfile(args.dataset, args.output_dataset)
    
    f = h5py.File(args.output_dataset, "r+")

    for demo_key in list(f["data"].keys()):
        ep_data_grp = f["data/{}".format(demo_key)]
        model_file = ep_data_grp.attrs["model_file"]
        
        coverted_model_file = convert_xml(model_file)
        ep_data_grp.attrs["model_file"] = coverted_model_file
        
    env_args = json.loads(f["data"].attrs["env_args"])
    env_args["env_version"] = robosuite.__version__ 
    f["data"].attrs["env_args"] = json.dumps(env_args, indent=4)

    f.close()
